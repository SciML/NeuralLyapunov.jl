var documenterSearchIndex = {"docs":
[{"location":"man/pdesystem/#Solving-a-Neural-Lyapunov-Problem","page":"Solving a Neural Lyapunov Problem","title":"Solving a Neural Lyapunov Problem","text":"","category":"section"},{"location":"man/pdesystem/","page":"Solving a Neural Lyapunov Problem","title":"Solving a Neural Lyapunov Problem","text":"NeuralLyapunov.jl represents neural Lyapunov problems as systems of partial differential equations, using the ModelingToolkit.PDESystem type. Such a PDESystem can then be solved using a physics-informed neural network through NeuralPDE.jl.","category":"page"},{"location":"man/pdesystem/","page":"Solving a Neural Lyapunov Problem","title":"Solving a Neural Lyapunov Problem","text":"Candidate Lyapunov functions will be trained within a box domain subset of the state space.","category":"page"},{"location":"man/pdesystem/","page":"Solving a Neural Lyapunov Problem","title":"Solving a Neural Lyapunov Problem","text":"NeuralLyapunovPDESystem","category":"page"},{"location":"man/pdesystem/#NeuralLyapunov.NeuralLyapunovPDESystem","page":"Solving a Neural Lyapunov Problem","title":"NeuralLyapunov.NeuralLyapunovPDESystem","text":"NeuralLyapunovPDESystem(dynamics::ODESystem, bounds, spec; <keyword_arguments>)\nNeuralLyapunovPDESystem(dynamics::Function, lb, ub, spec; <keyword_arguments>)\n\nConstruct a ModelingToolkit.PDESystem representing the specified neural Lyapunov problem.\n\nPositional Arguments\n\ndynamics: the dynamical system being analyzed, represented as an ODESystem or the function f such that ẋ = f(x[, u], p, t); either way, the ODE should not depend on time and only t = 0.0 will be used. (For an example of when f would have a u argument, see add_policy_search.)\nbounds: an array of domains, defining the training domain by bounding the states (and derivatives, when applicable) of dynamics; only used when dynamics isa ODESystem, otherwise use lb and ub.\nlb and ub: the training domain will be lb_1 ub_1lb_2 ub_2; not used when dynamics isa ODESystem, then use bounds.\nspec: a NeuralLyapunovSpecification defining the Lyapunov function structure, as well as the minimization and decrease conditions.\n\nKeyword Arguments\n\nfixed_point: the equilibrium being analyzed; defaults to the origin.\np: the values of the parameters of the dynamical system being analyzed; defaults to SciMLBase.NullParameters(); not used when dynamics isa ODESystem, then use the default parameter values of dynamics.\nstate_syms: an array of the Symbol representing each state; not used when dynamics isa ODESystem, then the symbols from dynamics are used; if dynamics isa ODEFunction, symbols stored there are used, unless overridden here; if not provided here and cannot be inferred, [:state1, :state2, ...] will be used.\nparameter_syms: an array of the Symbol representing each parameter; not used when dynamics isa ODESystem, then the symbols from dynamics are used; if dynamics isa ODEFunction, symbols stored there are used, unless overridden here; if not provided here and cannot be inferred, [:param1, :param2, ...] will be used.\npolicy_search::Bool: whether or not to include a loss term enforcing fixed_point to actually be a fixed point; defaults to false; only used when dynamics isa Function && !(dynamics isa ODEFunction); when dynamics isa ODEFunction, policy_search should not be supplied (as it must be false); when dynamics isa ODESystem, value inferred by the presence of unbound inputs.\nname: the name of the constructed PDESystem\n\n\n\n\n\n","category":"function"},{"location":"man/pdesystem/","page":"Solving a Neural Lyapunov Problem","title":"Solving a Neural Lyapunov Problem","text":"warning: Warning\nWhen using NeuralLyapunovPDESystem, the Lyapuonv function structure, minimization and decrease conditions, and dynamics will all be symbolically traced to generate the resulting PDESystem equations. In some cases tracing results in more efficient code, but in others it can result in inefficiencies or even errors.If the generated PDESystem is then used with NeuralPDE.jl, that library's parser will convert the equations into Julia functions representing the loss, which presents another opportunity for unexpected errors.","category":"page"},{"location":"man/pdesystem/#Extracting-the-numerical-Lyapunov-function","page":"Solving a Neural Lyapunov Problem","title":"Extracting the numerical Lyapunov function","text":"","category":"section"},{"location":"man/pdesystem/","page":"Solving a Neural Lyapunov Problem","title":"Solving a Neural Lyapunov Problem","text":"We provide the following convenience function for generating the Lyapunov function after the parameters have been found. If the PDESystem was solved using NeuralPDE.jl and Optimization.jl, then the argument phi is a field of the output of NeuralPDE.discretize and the argument θ is res.u.depvar where res is the result of the optimization.","category":"page"},{"location":"man/pdesystem/","page":"Solving a Neural Lyapunov Problem","title":"Solving a Neural Lyapunov Problem","text":"get_numerical_lyapunov_function","category":"page"},{"location":"man/pdesystem/#NeuralLyapunov.get_numerical_lyapunov_function","page":"Solving a Neural Lyapunov Problem","title":"NeuralLyapunov.get_numerical_lyapunov_function","text":"get_numerical_lyapunov_function(phi, θ, structure, dynamics, fixed_point;\n                                <keyword_arguments>)\n\nCombine Lyapunov function structure, dynamics, and neural network weights to generate Julia functions representing the Lyapunov function and its time derivative: V(x) V(x).\n\nThese functions can operate on a state vector or columnwise on a matrix of state vectors.\n\nPositional Arguments\n\nphi: the neural network, represented as phi(x, θ) if the neural network has a single output, or a Vector of the same with one entry per neural network output.\nθ: the parameters of the neural network; θ[:φ1] should be the parameters of the first neural network output (even if there is only one), θ[:φ2] the parameters of the second (if there are multiple), and so on.\nstructure: a NeuralLyapunovStructure representing the structure of the neural Lyapunov function.\ndynamics: the system dynamics, as a function to be used in conjunction with structure.f_call.\nfixed_point: the equilibrium point being analyzed by the Lyapunov function.\n\nKeyword Arguments\n\np: parameters to be passed into dynamics; defaults to SciMLBase.NullParameters().\nuse_V̇_structure: when true, V(x) is calculated using structure.V̇; when false, V(x) is calculated using deriv as fract V(x + t f(x)) at t = 0; defaults to false, as it is more efficient in many cases.\nderiv: a function for calculating derivatives; defaults to (and expects same arguments as) ForwardDiff.derivative; only used when use_V̇_structure is false.\njac: a function for calculating Jacobians; defaults to (and expects same arguments as) ForwardDiff.jacobian; only used when use_V̇_structure is true.\nJ_net: the Jacobian of the neural network, specified as a function J_net(phi, θ, state); if isnothing(J_net) (as is the default), J_net will be calculated using jac; only used when use_V̇_structure is true.\n\n\n\n\n\n","category":"function"},{"location":"man/minimization/#Lyapunov-Minimization-Condition","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"","category":"section"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"The condition that the Lyapunov function V(x) must be minimized uniquely at the fixed point x_0 is often represented as a requirement for V(x) to be positive away from the fixed point and zero at the fixed point. Put mathematically, it is sufficient to require V(x)  0  forall x ne x_0 and V(x_0) = 0. We call such functions positive definite (around the fixed point x_0). The weaker condition that V(x) ge 0  forall x ne x_0 and V(x_0) = 0 is positive semi-definiteness.","category":"page"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"NeuralLyapunov.jl provides the LyapunovMinimizationCondition struct for users to specify the form of the minimization condition to enforce through training.","category":"page"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"LyapunovMinimizationCondition     ","category":"page"},{"location":"man/minimization/#NeuralLyapunov.LyapunovMinimizationCondition","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.LyapunovMinimizationCondition","text":"LyapunovMinimizationCondition(check_nonnegativity, strength, rectifier, check_fixed_point)\n\nSpecifies the form of the Lyapunov minimization condition to be used.\n\nFields\n\ncheck_nonnegativity::Bool: whether or not to train for positivity/nonnegativity of V(x)\nstrength::Function: specifies the level of strictness for positivity training; should be zero when the two inputs are equal and nonnegative otherwise; used when check_nonnegativity == true\nrectifier::Function: positive when the input is positive and (approximately) zero when the input is negative\ncheck_fixed_point: whether or not to train for V(x_0) = 0.\n\nTraining conditions\n\nIf check_nonnegativity is true, training will attempt to enforce:\n\nV(x)  textttstrength(x x_0)\n\nThe inequality will be approximated by the equation:\n\ntextttrectifier(textttstrength(x x_0) - V(x_0)) = 0\n\nNote that the approximate equation and inequality are identical when textttrectifier(t) = max(0 t).\n\nIf check_fixed_point is true, then training will also attempt to enforce V(x_0) = 0.\n\nExamples\n\nWhen training for a strictly positive definite V, an example of an appropriate strength is textttstrength(x x_0) = lVert x - x_0 rVert^2. This form is used in StrictlyPositiveDefinite.\n\nIf V were structured such that it is always nonnegative, then V(x_0) = 0 is all that must be enforced in training for the Lyapunov function to be uniquely minimized at x_0. In that case, we would use     check_nonnegativity = false;  check_fixed_point = true. This can also be accomplished with DontCheckNonnegativity(true).\n\nIn either case, the rectified linear unit rectifier(t) = max(zero(t), t) exactly represents the inequality, but differentiable approximations of this function may be employed.\n\n\n\n\n\n","category":"type"},{"location":"man/minimization/#Pre-defined-minimization-conditions","page":"Lyapunov Minimization Condition","title":"Pre-defined minimization conditions","text":"","category":"section"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"StrictlyPositiveDefinite\nPositiveSemiDefinite\nDontCheckNonnegativity","category":"page"},{"location":"man/minimization/#NeuralLyapunov.StrictlyPositiveDefinite","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.StrictlyPositiveDefinite","text":"StrictlyPositiveDefinite(; C, check_fixed_point, rectifier)\n\nConstruct a LyapunovMinimizationCondition representing     V(x)  C lVert x - x_0 rVert^2. If check_fixed_point == true (as is the default), then training will also attempt to enforce V(x_0) = 0.\n\nThe inequality is approximated by     textttrectifier(C lVert x - x_0 rVert^2 - V(x)) = 0, and the default rectifier is the rectified linear unit (t) -> max(zero(t), t), which exactly represents V(x)  C lVert x - x_0 rVert^2. C defaults to 1e-6.\n\n\n\n\n\n","category":"function"},{"location":"man/minimization/#NeuralLyapunov.PositiveSemiDefinite","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.PositiveSemiDefinite","text":"PositiveSemiDefinite(; check_fixed_point, rectifier)\n\nConstruct a LyapunovMinimizationCondition representing V(x)  0. If check_fixed_point == true (as is the default), then training will also attempt to enforce V(x_0) = 0.\n\nThe inequality is approximated by textttrectifier( -V(x) ) = 0 and the default rectifier is the rectified linear unit (t) -> max(zero(t), t), which exactly represents V(x)  0.\n\n\n\n\n\n","category":"function"},{"location":"man/minimization/#NeuralLyapunov.DontCheckNonnegativity","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.DontCheckNonnegativity","text":"DontCheckNonnegativity(; check_fixed_point)\n\nConstruct a LyapunovMinimizationCondition which represents not checking for nonnegativity of the Lyapunov function. This is appropriate in cases where this condition has been structurally enforced.\n\nEven in this case, it is still possible to check for V(x_0) = 0, for example if V is structured to be positive for x  x_0 but does not guarantee V(x_0) = 0 (such as NonnegativeNeuralLyapunov). check_fixed_point defaults to true, since in cases where V(x_0) = 0 is enforced structurally, the equation will reduce to 0.0 ~ 0.0, which gets automatically removed in most cases.\n\n\n\n\n\n","category":"function"},{"location":"man/minimization/#Defining-your-own-minimization-condition","page":"Lyapunov Minimization Condition","title":"Defining your own minimization condition","text":"","category":"section"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"CurrentModule = NeuralLyapunov","category":"page"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"If a user wishes to define their own version of the minimization condition in a form other than V(x)  textttstrength(x x_0), they must define their own subtype of AbstractLyapunovMinimizationCondition.","category":"page"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"AbstractLyapunovMinimizationCondition","category":"page"},{"location":"man/minimization/#NeuralLyapunov.AbstractLyapunovMinimizationCondition","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.AbstractLyapunovMinimizationCondition","text":"AbstractLyapunovMinimizationCondition\n\nRepresents the minimization condition in a neural Lyapunov problem\n\nAll concrete AbstractLyapunovMinimizationCondition subtypes should define the check_nonnegativity, check_fixed_point, and get_minimization_condition functions.\n\n\n\n\n\n","category":"type"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"When constructing the PDESystem, NeuralLyapunovPDESystem uses check_nonnegativity to determine if it should include an equation equating the result of get_minimization_condition to zero. It additionally uses check_minimal_fixed_point to determine if it should include the equation V(x_0) = 0.","category":"page"},{"location":"man/minimization/","page":"Lyapunov Minimization Condition","title":"Lyapunov Minimization Condition","text":"check_nonnegativity\ncheck_minimal_fixed_point\nget_minimization_condition","category":"page"},{"location":"man/minimization/#NeuralLyapunov.check_nonnegativity","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.check_nonnegativity","text":"check_nonnegativity(cond::AbstractLyapunovMinimizationCondition)\n\nReturn true if cond specifies training to meet the Lyapunov minimization condition, and false if cond specifies no training to meet this condition.\n\n\n\n\n\n","category":"function"},{"location":"man/minimization/#NeuralLyapunov.check_minimal_fixed_point","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.check_minimal_fixed_point","text":"check_minimal_fixed_point(cond::AbstractLyapunovMinimizationCondition)\n\nReturn true if cond specifies training for the Lyapunov function to equal zero at the fixed point, and false if cond specifies no training to meet this condition.\n\n\n\n\n\n","category":"function"},{"location":"man/minimization/#NeuralLyapunov.get_minimization_condition","page":"Lyapunov Minimization Condition","title":"NeuralLyapunov.get_minimization_condition","text":"get_minimization_condition(cond::AbstractLyapunovMinimizationCondition)\n\nReturn a function of V, x, and x_0 that equals zero when the Lyapunov minimization condition is met for the Lyapunov candidate function V at the point x, and is greater than zero if it's violated.\n\nNote that the first input, V, is a function, so the minimization condition can depend on the value of the candidate Lyapunov function at multiple points.\n\n\n\n\n\n","category":"function"},{"location":"man/policy_search/#Policy-Search-and-Network-Dependent-Dynamics","page":"Policy Search and Network-Dependent Dynamics","title":"Policy Search and Network-Dependent Dynamics","text":"","category":"section"},{"location":"man/policy_search/","page":"Policy Search and Network-Dependent Dynamics","title":"Policy Search and Network-Dependent Dynamics","text":"At times, we wish to model a component of the dynamics with a neural network. A common example is the policy search case, when the closed-loop dynamics include a neural network controller. In such cases, we consider the dynamics to take the form of fracdxdt = f(x u p t), where u is the control input/the contribution to the dynamics from the neural network. We provide the add_policy_search function to transform a NeuralLyapunovStructure to include training the neural network to represent not just the Lyapunov function, but also the relevant part of the dynamics.","category":"page"},{"location":"man/policy_search/","page":"Policy Search and Network-Dependent Dynamics","title":"Policy Search and Network-Dependent Dynamics","text":"Similar to get_numerical_lyapunov_function, we provide the get_policy convenience function to construct u(x) that can be combined with the open-loop dynamics f(x u p t) to create closed loop dynamics f_cl(x p t) = f(x u(x) p t).","category":"page"},{"location":"man/policy_search/","page":"Policy Search and Network-Dependent Dynamics","title":"Policy Search and Network-Dependent Dynamics","text":"add_policy_search\nget_policy","category":"page"},{"location":"man/policy_search/#NeuralLyapunov.add_policy_search","page":"Policy Search and Network-Dependent Dynamics","title":"NeuralLyapunov.add_policy_search","text":"add_policy_search(lyapunov_structure, new_dims; control_structure)\n\nAdd dependence on the neural network to the dynamics in a NeuralLyapunovStructure.\n\nArguments\n\nlyapunov_structure::NeuralLyapunovStructure: provides structure for V V; should assume dynamics take a form of f(x, p, t).\nnew_dims::Integer: number of outputs of the neural network to pass into the dynamics through control_structure.\n\nKeyword Arguments\n\ncontrol_structure::Function: transforms the final new_dims outputs of the neural net before passing them into the dynamics; defaults to identity, passing in the neural network outputs unchanged.\n\nThe returned NeuralLyapunovStructure expects dynamics of the form f(x, u, p, t), where u captures the dependence of dynamics on the neural network (e.g., through a control input). When evaluating the dynamics, it uses u = control_structure(phi_end(x)) where phi_end is a function that returns the final new_dims outputs of the neural network. The other lyapunov_structure.network_dim outputs are used for calculating V and V, as specified originally by lyapunov_structure.\n\n\n\n\n\n","category":"function"},{"location":"man/policy_search/#NeuralLyapunov.get_policy","page":"Policy Search and Network-Dependent Dynamics","title":"NeuralLyapunov.get_policy","text":"get_policy(phi, θ, network_dim, control_dim; control_structure)\n\nGenerate a Julia function representing the control policy/unmodeled portion of the dynamics as a function of the state.\n\nThe returned function can operate on a state vector or columnwise on a matrix of state vectors.\n\nArguments\n\nphi: the neural network, represented as phi(state, θ) if the neural network has a single output, or a Vector of the same with one entry per neural network output.\nθ: the parameters of the neural network; θ[:φ1] should be the parameters of the first neural network output (even if there is only one), θ[:φ2] the parameters of the second (if there are multiple), and so on.\nnetwork_dim: total number of neural network outputs.\ncontrol_dim: number of neural network outputs used in the control policy.\n\nKeyword Arguments\n\ncontrol_structure: transforms the final control_dim outputs of the neural net before passing them into the dynamics; defaults to identity, passing in the neural network outputs unchanged.\n\n\n\n\n\n","category":"function"},{"location":"demos/benchmarking/#Benchmarking-a-neural-Lyapunov-method","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"","category":"section"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"In this demonstration, we'll benchmark the neural Lyapunov method used in the policy search demo. In that demonstration, we searched for a neural network policy to stabilize the upright equilibrium of the inverted pendulum. Here, we will use the benchmark function to run approximately the same training, then check the performance the of the resulting controller and neural Lyapunov function by simulating the closed loop system to see (1) how well the controller drives the pendulum to the upright equilibrium, and (2) how well the neural Lyapunov function performs as a classifier of whether a state is in the region of attraction or not. These results will be represented by a confusion matrix using the simulation results as ground truth. (Keep in mind that training does no simulation.)","category":"page"},{"location":"demos/benchmarking/#Copy-Pastable-Code","page":"Benchmarking a neural Lyapunov method","title":"Copy-Pastable Code","text":"","category":"section"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"using NeuralPDE, NeuralLyapunov, Lux\nimport Boltz.Layers: PeriodicEmbedding\nusing OptimizationOptimisers\nusing Random\n\nRandom.seed!(200)\n\n# Define dynamics and domain\nfunction open_loop_pendulum_dynamics(x, u, p, t)\n    θ, ω = x\n    ζ, ω_0 = p\n    τ = u[]\n    return [ω\n            -2ζ * ω_0 * ω - ω_0^2 * sin(θ) + τ]\nend\n\nlb = [0.0, -10.0];\nub = [2π, 10.0];\nupright_equilibrium = [π, 0.0]\np = [0.5, 1.0]\nstate_syms = [:θ, :ω]\nparameter_syms = [:ζ, :ω_0]\n\n# Define neural network discretization\n# We use an input layer that is periodic with period 2π with respect to θ\ndim_state = length(lb)\ndim_hidden = 15\ndim_phi = 2\ndim_u = 1\ndim_output = dim_phi + dim_u\nchain = [Lux.Chain(\n             PeriodicEmbedding([1], [2π]),\n             Dense(3, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1, use_bias = false)\n         ) for _ in 1:dim_output]\n\n# Define neural network discretization\nstrategy = QuasiRandomTraining(1250)\n\n# Define neural Lyapunov structure\nstructure = PositiveSemiDefiniteStructure(\n    dim_phi;\n    pos_def = function (state, fixed_point)\n        θ, ω = state\n        θ_eq, ω_eq = fixed_point\n        log(1.0 + (sin(θ) - sin(θ_eq))^2 + (cos(θ) - cos(θ_eq))^2 + (ω - ω_eq)^2)\n    end\n)\nstructure = add_policy_search(\n    structure,\n    dim_u\n)\nminimization_condition = DontCheckNonnegativity(check_fixed_point = false)\n\n# Define Lyapunov decrease condition\ndecrease_condition = AsymptoticStability()\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)\n\n# Define optimization parameters\nopt = OptimizationOptimisers.Adam()\noptimization_args = [:maxiters => 1000]\n\n# Run benchmark\ncm, time = benchmark(\n    open_loop_pendulum_dynamics,\n    lb,\n    ub,\n    spec,\n    chain,\n    strategy,\n    opt;\n    simulation_time = 200,\n    n_grid = 20,\n    fixed_point = upright_equilibrium,\n    p = p,\n    optimization_args = optimization_args,\n    state_syms = state_syms,\n    parameter_syms = parameter_syms,\n    policy_search = true,\n    endpoint_check = (x) -> ≈([sin(x[1]), cos(x[1]), x[2]], [0, -1, 0], atol=5e-3),\n)","category":"page"},{"location":"demos/benchmarking/#Detailed-Description","page":"Benchmarking a neural Lyapunov method","title":"Detailed Description","text":"","category":"section"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"Much of the set up is the same as in the policy search demo, so see that page for details.","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"using NeuralPDE, NeuralLyapunov, Lux\nimport Boltz.Layers: PeriodicEmbedding\nusing Random\n\nRandom.seed!(200)\n\n# Define dynamics and domain\nfunction open_loop_pendulum_dynamics(x, u, p, t)\n    θ, ω = x\n    ζ, ω_0 = p\n    τ = u[]\n    return [ω\n            -2ζ * ω_0 * ω - ω_0^2 * sin(θ) + τ]\nend\n\nlb = [0.0, -10.0];\nub = [2π, 10.0];\nupright_equilibrium = [π, 0.0]\np = [0.5, 1.0]\nstate_syms = [:θ, :ω]\nparameter_syms = [:ζ, :ω_0]\n\n# Define neural network discretization\n# We use an input layer that is periodic with period 2π with respect to θ\ndim_state = length(lb)\ndim_hidden = 15\ndim_phi = 2\ndim_u = 1\ndim_output = dim_phi + dim_u\nchain = [Lux.Chain(\n             PeriodicEmbedding([1], [2π]),\n             Dense(3, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1, use_bias = false)\n         ) for _ in 1:dim_output]\n\n# Define neural network discretization\nstrategy = QuasiRandomTraining(1250)\n\n# Define neural Lyapunov structure\nstructure = PositiveSemiDefiniteStructure(\n    dim_phi;\n    pos_def = function (state, fixed_point)\n        θ, ω = state\n        θ_eq, ω_eq = fixed_point\n        log(1.0 + (sin(θ) - sin(θ_eq))^2 + (cos(θ) - cos(θ_eq))^2 + (ω - ω_eq)^2)\n    end\n)\nstructure = add_policy_search(\n    structure,\n    dim_u\n)\nminimization_condition = DontCheckNonnegativity(check_fixed_point = false)\n\n# Define Lyapunov decrease condition\ndecrease_condition = AsymptoticStability()\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"At this point of the policy search demo, we constructed the PDESystem, discretized it using NeuralPDE.jl, and solved the resulting OptimizationProblem using Optimization.jl. All of that occurs in the benchmark function, so we instead provide that function with the optimizer and optimization arguments to use.","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"using OptimizationOptimisers\n\n# Define optimization parameters\nopt = OptimizationOptimisers.Adam()\noptimization_args = [:maxiters => 1000]","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"Finally, we can run the benchmark function.","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"endpoint_check = (x) -> ≈([sin(x[1]), cos(x[1]), x[2]], [0, -1, 0], atol=5e-3)\n(confusion_matrix, training_time), (states, endpoints, actual, predicted, V_samples, V̇_samples) = benchmark(\n    open_loop_pendulum_dynamics,\n    lb,\n    ub,\n    spec,\n    chain,\n    strategy,\n    opt;\n    simulation_time = 200,\n    n_grid = 20,\n    fixed_point = upright_equilibrium,\n    p = p,\n    optimization_args = optimization_args,\n    state_syms = state_syms,\n    parameter_syms = parameter_syms,\n    policy_search = true,\n    endpoint_check = endpoint_check,\n    classifier = (V, V̇, x) -> V̇ < zero(V̇) || endpoint_check(x),\n    verbose = true\n);\nnothing # hide","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"In this case, we used the verbose = true option to demonstrate the outputs of that option, but if you only want the confusion matrix and training time, leave that option off (verbose defaults to false) and change the first line to:","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"confusion_matrix, training_time = benchmark(","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"We can observe the confusion matrix and training time:","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"confusion_matrix","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"training_time","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"The returned actual labels are just endpoint_check applied to endpoints, which are the results of simulating from each element of states.","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"all(endpoint_check.(endpoints) .== actual)","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"Similarly, the predicted labels are the results of the neural Lyapunov classifier. In this case, we used the default classifier, which just checks for negative values of dotV.","category":"page"},{"location":"demos/benchmarking/","page":"Benchmarking a neural Lyapunov method","title":"Benchmarking a neural Lyapunov method","text":"classifier = (V, V̇, x) -> V̇ < zero(V̇) || endpoint_check(x)\nall(classifier.(V_samples, V̇_samples, states) .== predicted)","category":"page"},{"location":"man/structure/#Structuring-a-Neural-Lyapunov-function","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"","category":"section"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"Three simple neural Lyapunov function structures are provided, but users can always specify a custom structure using the NeuralLyapunovStructure struct.","category":"page"},{"location":"man/structure/#Pre-defined-structures","page":"Structuring a Neural Lyapunov function","title":"Pre-defined structures","text":"","category":"section"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"The simplest structure is to train the neural network directly to be the Lyapunov function, which can be accomplished using an UnstructuredNeuralLyapunov.","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"UnstructuredNeuralLyapunov","category":"page"},{"location":"man/structure/#NeuralLyapunov.UnstructuredNeuralLyapunov","page":"Structuring a Neural Lyapunov function","title":"NeuralLyapunov.UnstructuredNeuralLyapunov","text":"UnstructuredNeuralLyapunov()\n\nCreate a NeuralLyapunovStructure where the Lyapunov function is the neural network evaluated at the state. This does not structurally enforce any Lyapunov conditions.\n\nCorresponds to V(x) = ϕ(x), where ϕ is the neural network.\n\nDynamics are assumed to be in f(state, p, t) form, as in an ODEFunction. For f(state, input, p, t), consider using add_policy_search.\n\n\n\n\n\n","category":"function"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"The condition that the Lyapunov function V(x) must be minimized uniquely at the fixed point x_0 is often represented as a requirement for V(x) to be positive away from the fixed point and zero at the fixed point. Put mathematically, it is sufficient to require V(x)  0  forall x ne x_0 and V(x_0) = 0. We call such functions positive definite (around the fixed point x_0).","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"Two structures are provided which partially or fully enforce the minimization condition: NonnegativeNeuralLyapunov, which structurally enforces V(x) ge 0 everywhere, and PositiveSemiDefiniteStructure, which additionally enforces V(x_0) = 0.","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"NonnegativeNeuralLyapunov\nPositiveSemiDefiniteStructure","category":"page"},{"location":"man/structure/#NeuralLyapunov.NonnegativeNeuralLyapunov","page":"Structuring a Neural Lyapunov function","title":"NeuralLyapunov.NonnegativeNeuralLyapunov","text":"NonnegativeNeuralLyapunov(network_dim; <keyword_arguments>)\n\nCreate a NeuralLyapunovStructure where the Lyapunov function is the L2 norm of the neural network output plus a constant δ times a function pos_def.\n\nCorresponds to V(x) = lVert ϕ(x) rVert^2 + δ  textttpos_def(x x_0), where ϕ is the neural network and x_0 is the equilibrium point.\n\nThis structure ensures V(x)  0   x when δ  0 and pos_def is always nonnegative. Further, if δ  0 and pos_def is strictly positive definite around fixed_point, the structure ensures that V(x) is strictly positive away from fixed_point. In such cases, the minimization condition reduces to ensuring V(x_0) = 0, and so DontCheckNonnegativity(true) should be used.\n\nArguments\n\nnetwork_dim: output dimensionality of the neural network.\n\nKeyword Arguments\n\nδ: weight of pos_def, as above; defaults to 0.\npos_def(state, fixed_point): a function that is postive (semi-)definite in state around fixed_point; defaults to log(1 + lVert x - x_0 rVert^2).\ngrad_pos_def(state, fixed_point): the gradient of pos_def with respect to state at state. If isnothing(grad_pos_def) (as is the default), the gradient of pos_def will be evaluated using grad.\ngrad: a function for evaluating gradients to be used when isnothing(grad_pos_def); defaults to, and expects the same arguments as, ForwardDiff.gradient.\n\nDynamics are assumed to be in f(state, p, t) form, as in an ODEFunction. For f(state, input, p, t), consider using add_policy_search.\n\nSee also: DontCheckNonnegativity\n\n\n\n\n\n","category":"function"},{"location":"man/structure/#NeuralLyapunov.PositiveSemiDefiniteStructure","page":"Structuring a Neural Lyapunov function","title":"NeuralLyapunov.PositiveSemiDefiniteStructure","text":"PositiveSemiDefiniteStructure(network_dim; <keyword_arguments>)\n\nCreate a NeuralLyapunovStructure where the Lyapunov function is the product of a positive (semi-)definite function pos_def which does not depend on the network and a nonnegative function non_neg which does depend the network.\n\nCorresponds to V(x) = textttpos_def(x x_0) * textttnon_neg(ϕ x x_0), where ϕ is the neural network and x_0 is the equilibrium point.\n\nThis structure ensures V(x)  0. Further, if pos_def is strictly positive definite fixed_point and non_neg is strictly positive (as is the case for the default values of pos_def and non_neg), then this structure ensures V(x) is strictly positive definite around fixed_point. In such cases, the minimization condition is satisfied structurally, so DontCheckNonnegativity(false) should be used.\n\nArguments\n\nnetwork_dim: output dimensionality of the neural network.\n\nKeyword Arguments\n\npos_def(state, fixed_point): a function that is postive (semi-)definite in state around fixed_point; defaults to log(1 + lVert x - x_0 rVert^2).\nnon_neg(net, state, fixed_point): a nonnegative function of the neural network; note that net is the neural network ϕ, and net(state) is the value of the neural network at a point ϕ(x); defaults to 1 + lVert ϕ(x) rVert^2.\ngrad_pos_def(state, fixed_point): the gradient of pos_def with respect to state at state. If isnothing(grad_pos_def) (as is the default), the gradient of pos_def will be evaluated using grad.\ngrad_non_neg(net, J_net, state, fixed_point): the gradient of non_neg with respect to state at state; J_net is a function outputting the Jacobian of net at the input. If isnothing(grad_non_neg) (as is the default), the gradient of non_neg will be evaluated using grad.\ngrad: a function for evaluating gradients to be used when isnothing(grad_pos_def) || isnothing(grad_non_neg); defaults to, and expects the same arguments as, ForwardDiff.gradient.\n\nDynamics are assumed to be in f(state, p, t) form, as in an ODEFunction. For f(state, input, p, t), consider using add_policy_search.\n\nSee also: DontCheckNonnegativity\n\n\n\n\n\n","category":"function"},{"location":"man/structure/#Defining-your-own-neural-Lyapunov-function-structure","page":"Structuring a Neural Lyapunov function","title":"Defining your own neural Lyapunov function structure","text":"","category":"section"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"To define a new structure for a neural Lyapunov function, one must specify the form of the Lyapunov candidate V and its time derivative along a trajectory dotV, as well as how to call the dynamics f. Additionally, the dimensionality of the output of the neural network must be known in advance.","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"NeuralLyapunovStructure","category":"page"},{"location":"man/structure/#NeuralLyapunov.NeuralLyapunovStructure","page":"Structuring a Neural Lyapunov function","title":"NeuralLyapunov.NeuralLyapunovStructure","text":"NeuralLyapunovStructure(V, V̇, f_call, network_dim)\n\nSpecifies the structure of the neural Lyapunov function and its derivative.\n\nAllows the user to define the Lyapunov in terms of the neural network, potentially structurally enforcing some Lyapunov conditions.\n\nFields\n\nV(phi::Function, state, fixed_point): outputs the value of the Lyapunov function at state.\nV̇(phi::Function, J_phi::Function, dynamics::Function, state, params, t, fixed_point): outputs the time derivative of the Lyapunov function at state.\nf_call(dynamics::Function, phi::Function, state, params, t): outputs the derivative of the state; this is useful for making closed-loop dynamics which depend on the neural network, such as in the policy search case.\nnetwork_dim: the dimension of the output of the neural network.\n\nphi and J_phi above are both functions of state alone.\n\n\n\n\n\n","category":"type"},{"location":"man/structure/#Calling-the-dynamics","page":"Structuring a Neural Lyapunov function","title":"Calling the dynamics","text":"","category":"section"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"Very generally, the dynamical system can be a system of ODEs dotx = f(x u p t), where u is a control input, p contains parameters, and f depends on the neural network in some way. To capture this variety, users must supply the function f_call(dynamics::Function, phi::Function, state, p, t).","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"The most common example is when dynamics takes the same form as an ODEFunction.  i.e., dotx = textttdynamics(x p t). In that case, f_call(dynamics, phi, state, p, t) = dynamics(state, p, t).","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"Suppose instead, the dynamics were supplied as a function of state alone: dotx = textttdynamics(x). Then, f_call(dynamics, phi, state, p, t) = dynamics(state).","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"Finally, suppose dotx = textttdynamics(x u p t) has a unidimensional control input that is being trained (via policy search) to be the second output of the neural network. Then f_call(dynamics, phi, state, p, t) = dynamics(state, phi(state)[2], p, t).","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"Note that, despite the inclusion of the time variable t, NeuralLyapunov.jl currently only supports time-invariant systems, so only t = 0.0 is used.","category":"page"},{"location":"man/structure/#Structuring-V-and-\\dot{V}","page":"Structuring a Neural Lyapunov function","title":"Structuring V and dotV","text":"","category":"section"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"The Lyapunov candidate function V gets specified as a function V(phi, state, fixed_point), where phi is the neural network as a function phi(state). Note that this form allows V(x) to depend on the neural network evaluated at points other than just the input x.","category":"page"},{"location":"man/structure/","page":"Structuring a Neural Lyapunov function","title":"Structuring a Neural Lyapunov function","text":"The time derivative dotV is similarly defined by a function V̇(phi, J_phi, dynamics, state, params, t, fixed_point). The function J_phi(state) gives the Jacobian of the neural network phi at state. The function dynamics is as above (with parameters params). ","category":"page"},{"location":"man/benchmarking/#Benchmarking-neural-Lyapunov-methods","page":"Benchmarking neural Lyapunov methods","title":"Benchmarking neural Lyapunov methods","text":"","category":"section"},{"location":"man/benchmarking/","page":"Benchmarking neural Lyapunov methods","title":"Benchmarking neural Lyapunov methods","text":"To facilitate comparison of different neural Lyapunov specifications, optimizers, hyperparameters, etc., we provide the benchmark function.","category":"page"},{"location":"man/benchmarking/","page":"Benchmarking neural Lyapunov methods","title":"Benchmarking neural Lyapunov methods","text":"Through its arguments, users may specify how a neural Lyapunov problem, the neural network structure, the physics-informed neural network discretization strategy, and the optimization strategy used to solve the problem. After solving the problem in the specified manner, the dynamical system is simulated (users can specify an ODE solver in the arguments, as well) and classification by the neural Lyapunov function is compared to the simulation results. By default, the benchmark function returns a confusion matrix for the resultant neural Lyapunov classifier and the training time, so that users can compare accuracy and computation speed of various methods.","category":"page"},{"location":"man/benchmarking/","page":"Benchmarking neural Lyapunov methods","title":"Benchmarking neural Lyapunov methods","text":"benchmark","category":"page"},{"location":"man/benchmarking/#NeuralLyapunov.benchmark","page":"Benchmarking neural Lyapunov methods","title":"NeuralLyapunov.benchmark","text":"benchmark(dynamics, bounds, spec, chain, strategy, opt; <keyword_arguments>)\nbenchmark(dynamics, lb, ub, spec, chain, strategy, opt; <keyword_arguments>)\n\nEvaluate the specified neural Lyapunov method on the given system. Return the confusion matrix and optimization time.\n\nTrain a neural Lyapunov function as specified, then discretize the domain using a grid discretization and use the neural Lyapnov function to and the provided classifier to predict whether grid points are in the region of attraction of the provided fixed_point. Finally, simulate the system from each grid point and check if the trajectories reach the fixed point. Return a confusion matrix for the neural Lyapunov classifier using the results of the simulated trajectories as ground truth. Additionally return the time it took for the optimization to run.\n\nPositional Arguments\n\ndynamics: the dynamical system being analyzed, represented as an ODESystem or the function f such that ẋ = f(x[, u], p, t); either way, the ODE should not depend on time and only t = 0.0 will be used. (For an example of when f would have a u argument, see add_policy_search.)\nbounds: an array of domains, defining the training domain by bounding the states (and derivatives, when applicable) of dynamics; only used when dynamics isa ODESystem, otherwise use lb and ub.\nlb and ub: the training domain will be lb_1 ub_1lb_2 ub_2; not used when dynamics isa ODESystem, then use bounds.\nspec: a NeuralLyapunovSpecification defining the Lyapunov function structure, as well as the minimization and decrease conditions.\nchain: a vector of Lux/Flux chains with a d-dimensional input and a 1-dimensional output corresponding to each of the dependent variables, where d is the length of bounds or lb and ub. Note that this specification respects the order of the dependent variables as specified in the PDESystem. Flux chains will be converted to Lux internally by NeuralPDE using NeuralPDE.adapt(FromFluxAdaptor(false, false), chain).\nstrategy: determines which training strategy will be used. See the NeuralPDE Training Strategy documentation for more details.\nopt: optimizer to use in training the neural Lyapunov function.\n\nKeyword Arguments\n\nn_grid: number or grid points in each dimension used for evaluating the neural Lyapunov classifier.\nclassifier: function of V(x), V(x), and x that predicts whether x is in the region of attraction; defaults to (V, V̇, x) -> V̇ < 0 || endpoint_check(x).\nfixed_point: the equilibrium being analyzed; defaults to the origin.\np: the values of the parameters of the dynamical system being analyzed; defaults to SciMLBase.NullParameters(); not used when dynamics isa ODESystem, then use the default parameter values of dynamics.\nstate_syms: an array of the Symbol representing each state; not used when dynamics isa ODESystem, then the symbols from dynamics are used; if dynamics isa ODEFunction, symbols stored there are used, unless overridden here; if not provided here and cannot be inferred, [:state1, :state2, ...] will be used.\nparameter_syms: an array of the Symbol representing each parameter; not used when dynamics isa ODESystem, then the symbols from dynamics are used; if dynamics isa ODEFunction, symbols stored there are used, unless overridden here; if not provided here and cannot be inferred, [:param1, :param2, ...] will be used.\npolicy_search::Bool: whether or not to include a loss term enforcing fixed_point to actually be a fixed point; defaults to false; only used when dynamics isa Function && !(dynamics isa ODEFunction); when dynamics isa ODEFunction, policy_search should not be supplied (as it must be false); when dynamics isa ODESystem, value inferred by the presence of unbound inputs.\noptimization_args: arguments to be passed into the optimization solver. For more information, see the Optimization.jl docs.\nsimulation_time: simulation end time for checking if trajectory from a point reaches equilibrium\node_solver: differential equation solver used in simulating the system for evaluation. For more information, see the DifferentialEquations.jl docs.\node_solver_args: arguments to be passed into the differential equation solver. For more information, see the DifferentialEquations.jl docs.\nendpoint_check: function of the endpoint of a simulation that returns true when the endpoint is approximately the fixed point and false otherwise; defaults to (x) -> ≈(x, fixed_point; atol=atol).\natol: absolute tolerance used in the default value for endpoint_check.\nverbose: enable verbose output. Instead of outputting (confusion_matrix, training_time), output ((confusion_matrix, training_time), (states, endpoints, actual, predicted, V_samples, V̇_samples)), where states is the grid of evaluation points, endpoints is the endpoints of the simulations, actual is the result of endpoint_check applied to endpoints, predicted is the result of classifier applied to states, V_samples is V evaluated at states, and V̇_samples is V evaluated at states.\n\n\n\n\n\n","category":"function"},{"location":"man/roa/#Training-for-Region-of-Attraction-Identification","page":"Training for Region of Attraction Identification","title":"Training for Region of Attraction Identification","text":"","category":"section"},{"location":"man/roa/","page":"Training for Region of Attraction Identification","title":"Training for Region of Attraction Identification","text":"Satisfying the minimization and decrease conditions within the training region (or any region around the fixed point, however small) is sufficient for proving local stability. In many cases, however, we desire an estimate of the region of attraction, rather than simply a guarantee of local stability.","category":"page"},{"location":"man/roa/","page":"Training for Region of Attraction Identification","title":"Training for Region of Attraction Identification","text":"Any compact sublevel set wherein the minimization and decrease conditions are satisfied is an inner estimate of the region of attraction. Therefore, we can restrict training for those conditions to only within a predetermined sublevel set  x  V(x) le rho . To do so, define a LyapunovDecreaseCondition as usual and then pass it through the make_RoA_aware function, which returns an analogous RoAAwareDecreaseCondition.","category":"page"},{"location":"man/roa/","page":"Training for Region of Attraction Identification","title":"Training for Region of Attraction Identification","text":"make_RoA_aware\nRoAAwareDecreaseCondition","category":"page"},{"location":"man/roa/#NeuralLyapunov.make_RoA_aware","page":"Training for Region of Attraction Identification","title":"NeuralLyapunov.make_RoA_aware","text":"make_RoA_aware(cond; ρ, out_of_RoA_penalty, sigmoid)\n\nAdd awareness of the region of attraction (RoA) estimation task to the supplied LyapunovDecreaseCondition.\n\nWhen estimating the region of attraction using a Lyapunov function, the decrease condition only needs to be met within a bounded sublevel set  x  V(x)  ρ . The returned RoAAwareDecreaseCondition enforces the decrease condition represented by cond only in that sublevel set.\n\nArguments\n\ncond::LyapunovDecreaseCondition: specifies the loss to be applied when V(x)  ρ.\n\nKeyword Arguments\n\nρ: the target level such that the RoA will be  x  V(x)  ρ , defaults to 1.\nout_of_RoA_penalty::Function: specifies the loss to be applied when V(x)  ρ, defaults to no loss.\nsigmoid::Function: approximately one when the input is positive and approximately zero when the input is negative, defaults to unit step function.\n\nThe loss applied to samples x such that V(x)  ρ is lvert textttout_of_RoA_penalty(V(x) V(x) x x_0 ρ) rvert^2.\n\nThe sigmoid function allows for a smooth transition between the V(x)  ρ case and the V(x)  ρ case, by combining the above equations into one:\n\ntextttsigmoid(ρ - V(x)) (textin-RoA expression) + textttsigmoid(V(x) - ρ) (textout-of-RoA expression) = 0.\n\nNote that a hard transition, which only enforces the in-RoA equation when V(x)  ρ and the out-of-RoA equation when V(x)  ρ can be provided by a sigmoid which is exactly one when the input is nonnegative and exactly zero when the input is negative. As such, the default value is sigmoid(t) = t ≥ zero(t).\n\nSee also: RoAAwareDecreaseCondition\n\n\n\n\n\n","category":"function"},{"location":"man/roa/#NeuralLyapunov.RoAAwareDecreaseCondition","page":"Training for Region of Attraction Identification","title":"NeuralLyapunov.RoAAwareDecreaseCondition","text":"RoAAwareDecreaseCondition(check_decrease, rate_metric, strength, rectifier, ρ, out_of_RoA_penalty)\n\nSpecifies the form of the Lyapunov decrease condition to be used, training for a region of attraction estimate of  x  V(x)  ρ .\n\nFields\n\ncheck_decrease::Bool: whether or not to train for negativity/nonpositivity of V(x).\nrate_metric::Function: should increase with V(x); used when check_decrease == true.\nstrength::Function: specifies the level of strictness for negativity training; should be zero when the two inputs are equal and nonnegative otherwise; used when check_decrease == true.\nrectifier::Function: positive when the input is positive and (approximately) zero when the input is negative.\nsigmoid::Function: approximately one when the input is positive and approximately zero when the input is negative.\nρ: the level of the sublevel set forming the estimate of the region of attraction.\nout_of_RoA_penalty::Function: a loss function to be applied penalizing points outside the sublevel set forming the region of attraction estimate.\n\nTraining conditions\n\nIf check_decrease == true, training will attempt to enforce\n\ntextttrate_metric(V(x) V(x))  - textttstrength(x x_0)\n\nwhenever V(x)  ρ, and will instead apply a loss of\n\nlvert textttout_of_RoA_penalty(V(x) V(x) x x_0 ρ) rvert^2\n\nwhen V(x)  ρ.\n\nThe inequality will be approximated by the equation\n\ntextttrectifier(textttrate_metric(V(x) V(x)) + textttstrength(x x_0)) = 0.\n\nNote that the approximate equation and inequality are identical when textttrectifier(t) = max(0 t).\n\nThe sigmoid function allows for a smooth transition between the V(x)  ρ case and the V(x)  ρ case, by combining the above equations into one:\n\ntextttsigmoid(ρ - V(x)) (textin-RoA expression) + textttsigmoid(V(x) - ρ) (textout-of-RoA expression) = 0.\n\nNote that a hard transition, which only enforces the in-RoA equation when V(x)  ρ and the out-of-RoA equation when V(x)  ρ can be provided by a sigmoid which is exactly one when the input is nonnegative and exactly zero when the input is negative.\n\nIf the dynamics truly have a fixed point at x_0 and V(x) is truly the rate of decrease of V(x) along the dynamics, then V(x_0) will be 0 and there is no need to train for V(x_0) = 0.\n\nExamples:\n\nAsymptotic decrease can be enforced by requiring     V(x)  -C lVert x - x_0 rVert^2, for some positive C, which corresponds to\n\nrate_metric = (V, dVdt) -> dVdt\nstrength = (x, x0) -> C * (x - x0) ⋅ (x - x0)\n\nExponential decrease of rate k is proven by     V(x)  - k V(x), which corresponds to\n\nrate_metric = (V, dVdt) -> dVdt + k * V\nstrength = (x, x0) -> 0.0\n\nEnforcing either condition only in the region of attraction and not penalizing any points outside that region would correspond to\n\nout_of_RoA_penalty = (V, dVdt, state, fixed_point, ρ) -> 0.0\n\nwhereas an example of a penalty that decays farther in state space from the fixed point is\n\nout_of_RoA_penalty = (V, dVdt, x, x0, ρ) -> 1.0 / ((x - x0) ⋅ (x - x0))\n\nNote that this penalty could also depend on values of V and V at various points, as well as ρ.\n\nIn any of these cases, the rectified linear unit rectifier = (t) -> max(zero(t), t) exactly represents the inequality, but differentiable approximations of this function may be employed.\n\nSee also: LyapunovDecreaseCondition\n\n\n\n\n\n","category":"type"},{"location":"demos/damped_SHO/#Damped-Simple-Harmonic-Oscillator","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"","category":"section"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"Let's train a neural network to prove the exponential stability of the damped simple harmonic oscillator (SHO).","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"The damped SHO is represented by the system of differential equations","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"beginalign*\n    fracdxdt = v \n    fracdvdt = -2 zeta omega_0 v - omega_0^2 x\nendalign*","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"where x is the position, v is the velocity, t is time, and zeta omega_0 are parameters.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"We'll consider just the box domain x in -5 5 v in -2 2.","category":"page"},{"location":"demos/damped_SHO/#Copy-Pastable-Code","page":"Damped Simple Harmonic Oscillator","title":"Copy-Pastable Code","text":"","category":"section"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"using NeuralPDE, Lux, NeuralLyapunov\nusing Optimization, OptimizationOptimisers, OptimizationOptimJL\nusing Random\n\nRandom.seed!(200)\n\n######################### Define dynamics and domain ##########################\n\n\"Simple Harmonic Oscillator Dynamics\"\nfunction f(state, p, t)\n    ζ, ω_0 = p\n    pos = state[1]\n    vel = state[2]\n    vcat(vel, -2ζ * ω_0 * vel - ω_0^2 * pos)\nend\nlb = [-5.0, -2.0];\nub = [ 5.0,  2.0];\np = [0.5, 1.0];\nfixed_point = [0.0, 0.0];\ndynamics = ODEFunction(f; sys = SciMLBase.SymbolCache([:x, :v], [:ζ, :ω_0]))\n\n####################### Specify neural Lyapunov problem #######################\n\n# Define neural network discretization\ndim_state = length(lb)\ndim_hidden = 10\ndim_output = 3\nchain = [Lux.Chain(\n             Dense(dim_state, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1)\n         ) for _ in 1:dim_output]\n\n# Define training strategy\nstrategy = QuasiRandomTraining(1000)\ndiscretization = PhysicsInformedNN(chain, strategy)\n\n# Define neural Lyapunov structure\nstructure = NonnegativeNeuralLyapunov(\n    dim_output;\n    δ = 1e-6\n)\nminimization_condition = DontCheckNonnegativity(check_fixed_point = true)\n\n# Define Lyapunov decrease condition\n# Damped SHO has exponential stability at a rate of k = ζ * ω_0, so we train to certify that\ndecrease_condition = ExponentialStability(prod(p))\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)\n\n############################# Construct PDESystem #############################\n\n@named pde_system = NeuralLyapunovPDESystem(\n    dynamics,\n    lb,\n    ub,\n    spec;\n    p = p\n)\n\n######################## Construct OptimizationProblem ########################\n\nprob = discretize(pde_system, discretization)\n\n########################## Solve OptimizationProblem ##########################\n\nres = Optimization.solve(prob, OptimizationOptimisers.Adam(); maxiters = 500)\n\n###################### Get numerical numerical functions ######################\nnet = discretization.phi\nθ = res.u.depvar\n\nV, V̇ = get_numerical_lyapunov_function(\n    net,\n    θ,\n    structure,\n    f,\n    fixed_point;\n    p = p\n)","category":"page"},{"location":"demos/damped_SHO/#Detailed-description","page":"Damped Simple Harmonic Oscillator","title":"Detailed description","text":"","category":"section"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"In this example, we set the dynamics up as an ODEFunction and use a SciMLBase.SymbolCache to tell the ultimate PDESystem what to call our state and parameter variables.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"using Random\n\nRandom.seed!(200)","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"using NeuralPDE # for ODEFunction and SciMLBase.SymbolCache\n\n\"Simple Harmonic Oscillator Dynamics\"\nfunction f(state, p, t)\n    ζ, ω_0 = p\n    pos = state[1]\n    vel = state[2]\n    vcat(vel, -2ζ * ω_0 * vel - ω_0^2 * pos)\nend\nlb = [-5.0, -2.0];\nub = [ 5.0,  2.0];\np = [0.5, 1.0];\nfixed_point = [0.0, 0.0];\ndynamics = ODEFunction(f; sys = SciMLBase.SymbolCache([:x, :v], [:ζ, :ω_0]))","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"Setting up the neural network using Lux and NeuralPDE training strategy is no different from any other physics-informed neural network problem. For more on that aspect, see the NeuralPDE documentation.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"using Lux\n\n# Define neural network discretization\ndim_state = length(lb)\ndim_hidden = 10\ndim_output = 3\nchain = [Lux.Chain(\n             Dense(dim_state, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1)\n         ) for _ in 1:dim_output]","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"# Define training strategy\nstrategy = QuasiRandomTraining(1000)\ndiscretization = PhysicsInformedNN(chain, strategy)","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"We now define our Lyapunov candidate structure along with the form of the Lyapunov conditions we'll be using.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"For this example, let's use a Lyapunov candidate","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"V(x) = lVert phi(x) rVert^2 + delta log left( 1 + lVert x rVert^2 right)","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"which structurally enforces nonnegativity, but doesn't guarantee V(0 0) = 0. We therefore don't need a term in the loss function enforcing V(x)  0  forall x ne 0, but we do need something enforcing V(0 0) = 0. So, we use DontCheckNonnegativity(check_fixed_point = true).","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"To train for exponential stability we use ExponentialStability, but we must specify the rate of exponential decrease, which we know in this case to be zeta omega_0.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"using NeuralLyapunov\n\n# Define neural Lyapunov structure\nstructure = NonnegativeNeuralLyapunov(\n    dim_output;\n    δ = 1e-6\n)\nminimization_condition = DontCheckNonnegativity(check_fixed_point = true)\n\n# Define Lyapunov decrease condition\n# Damped SHO has exponential stability at a rate of k = ζ * ω_0, so we train to certify that\ndecrease_condition = ExponentialStability(prod(p))\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)\n\n# Construct PDESystem\n@named pde_system = NeuralLyapunovPDESystem(\n    dynamics,\n    lb,\n    ub,\n    spec;\n    p = p\n)","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"Now, we solve the PDESystem using NeuralPDE the same way we would any PINN problem.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"prob = discretize(pde_system, discretization)\n\nusing Optimization, OptimizationOptimisers, OptimizationOptimJL\n\nres = Optimization.solve(prob, OptimizationOptimisers.Adam(); maxiters = 500)\n\nnet = discretization.phi\nθ = res.u.depvar","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"We can use the result of the optimization problem to build the Lyapunov candidate as a Julia function.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"V, V̇ = get_numerical_lyapunov_function(\n    net,\n    θ,\n    structure,\n    f,\n    fixed_point;\n    p = p\n)","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"Now let's see how we did. We'll evaluate both V and dotV on a 101 times 101 grid:","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"Δx = (ub[1] - lb[1]) / 100\nΔv = (ub[2] - lb[2]) / 100\nxs = lb[1]:Δx:ub[1]\nvs = lb[2]:Δv:ub[2]\nstates = Iterators.map(collect, Iterators.product(xs, vs))\nV_samples = vec(V(hcat(states...)))\nV̇_samples = vec(V̇(hcat(states...)))\n\n# Print statistics\nV_min, i_min = findmin(V_samples)\nstate_min = collect(states)[i_min]\nV_min, state_min = if V(fixed_point) ≤ V_min\n        V(fixed_point), fixed_point\n    else\n        V_min, state_min\n    end\n\nprintln(\"V(0.,0.) = \", V(fixed_point))\nprintln(\"V ∋ [\", V_min, \", \", maximum(V_samples), \"]\")\nprintln(\"Minimial sample of V is at \", state_min)\nprintln(\n    \"V̇ ∋ [\",\n    minimum(V̇_samples),\n    \", \",\n    max(V̇(fixed_point), maximum(V̇_samples)),\n    \"]\",\n)","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"At least at these validation samples, the conditions that dotV be negative semi-definite and V be minimized at the origin are nearly satisfied.","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"using Plots\n\np1 = plot(xs, vs, V_samples, linetype = :contourf, title = \"V\", xlabel = \"x\", ylabel = \"v\");\np1 = scatter!([0], [0], label = \"Equilibrium\");\np2 = plot(\n    xs,\n    vs,\n    V̇_samples,\n    linetype = :contourf,\n    title = \"V̇\",\n    xlabel = \"x\",\n    ylabel = \"v\",\n);\np2 = scatter!([0], [0], label = \"Equilibrium\");\nplot(p1, p2)","category":"page"},{"location":"demos/damped_SHO/","page":"Damped Simple Harmonic Oscillator","title":"Damped Simple Harmonic Oscillator","text":"Each sublevel set of V completely contained in the plot above has been verified as a subset of the region of attraction.","category":"page"},{"location":"man/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"man/internals/","page":"Internals","title":"Internals","text":"NeuralLyapunov.phi_to_net","category":"page"},{"location":"man/internals/#NeuralLyapunov.phi_to_net","page":"Internals","title":"NeuralLyapunov.phi_to_net","text":"phi_to_net(phi, θ[; idx])\n\nReturn the network as a function of state alone.\n\nArguments\n\nphi: the neural network, represented as phi(x, θ) if the neural network has a single output, or a Vector of the same with one entry per neural network output.\nθ: the parameters of the neural network; θ[:φ1] should be the parameters of the first neural network output (even if there is only one), θ[:φ2] the parameters of the second (if there are multiple), and so on.\nidx: the neural network outputs to include in the returned function; defaults to all and only applicable when phi isa Vector.\n\n\n\n\n\n","category":"function"},{"location":"man/local_lyapunov/#Local-Lyapunov-analysis","page":"Local Lyapunov analysis","title":"Local Lyapunov analysis","text":"","category":"section"},{"location":"man/local_lyapunov/","page":"Local Lyapunov analysis","title":"Local Lyapunov analysis","text":"For comparison with neural Lyapunov methods, we also provide a function for local Lyapunov analysis by linearization.","category":"page"},{"location":"man/local_lyapunov/","page":"Local Lyapunov analysis","title":"Local Lyapunov analysis","text":"local_lyapunov","category":"page"},{"location":"man/local_lyapunov/#NeuralLyapunov.local_lyapunov","page":"Local Lyapunov analysis","title":"NeuralLyapunov.local_lyapunov","text":"local_lyapunov(dynamics, state_dim, optimizer_factory[, jac]; fixed_point, p)\n\nUse semidefinite programming to derive a quadratic Lyapunov function for the linearization of dynamics around fixed_point. Return (V, dV/dt).\n\nTo solve the semidefinite program, JuMP.Model requires an optimizer_factory capable of semidefinite programming (SDP). See the JuMP documentation for examples.\n\nIf jac is not supplied, the Jacobian of the dynamics(x, p, t) with respect to x is calculated using ForwardDiff. Otherwise, jac is expected to be either a function or an AbstractMatrix. If jac isa Function, it should take in the state and parameters and output the Jacobian of dynamics with respect to the state x. If jac isa AbstractMatrix, it should be the value of the Jacobian at fixed_point.\n\nIf fixed_point is not specified, it defaults to the origin, i.e., zeros(state_dim). Parameters p for the dynamics should be supplied when the dynamics depend on them.\n\n\n\n\n\n","category":"function"},{"location":"man/#Components-of-a-Neural-Lyapunov-Problem","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"","category":"section"},{"location":"man/","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"For a candidate Lyapunov function V(x) to certify the stability of an equilibrium point x_0 of the dynamical system fracdxdt = f(x(t)), it must satisfy two conditions:","category":"page"},{"location":"man/","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"The function V must be uniquely minimized at x_0, and \nThe function V must decrease along system trajectories (i.e., V(x(t)) decreases as long as x(t) is a trajectory of the dynamical system).","category":"page"},{"location":"man/","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"A neural Lyapunov function represents the candidate Lyapunov function V using a neural network, sometimes modifying the output of the network slightly so as to enforce one of the above conditions.","category":"page"},{"location":"man/","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"Thus, we specify our neural Lyapunov problems with three components, each answering a different question:","category":"page"},{"location":"man/","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"How is V structured in terms of the neural network?\nHow is the minimization condition to be enforced?\nHow is the decrease condition to be enforced?","category":"page"},{"location":"man/","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"These three components are represented by the three fields of a NeuralLyapunovSpecification object.","category":"page"},{"location":"man/","page":"Components of a Neural Lyapunov Problem","title":"Components of a Neural Lyapunov Problem","text":"NeuralLyapunovSpecification","category":"page"},{"location":"man/#NeuralLyapunov.NeuralLyapunovSpecification","page":"Components of a Neural Lyapunov Problem","title":"NeuralLyapunov.NeuralLyapunovSpecification","text":"NeuralLyapunovSpecification(structure, minimzation_condition, decrease_condition)\n\nSpecifies a neural Lyapunov problem.\n\nFields\n\nstructure: a NeuralLyapunovStructure specifying the relationship between the neural network and the candidate Lyapunov function.\nminimzation_condition: an AbstractLyapunovMinimizationCondition specifying how the minimization condition will be enforced.\ndecrease_condition: an AbstractLyapunovDecreaseCondition specifying how the decrease condition will be enforced.\n\n\n\n\n\n","category":"type"},{"location":"demos/policy_search/#Policy-Search-on-the-Driven-Inverted-Pendulum","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"","category":"section"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"In this demonstration, we'll search for a neural network policy to stabilize the upright equilibrium of the inverted pendulum.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"The governing differential equation for the driven pendulum is:","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"fracd^2 thetadt^2 + 2 zeta omega_0 fracd thetadt + omega_0^2 sin(theta) = tau","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"where theta is the counterclockwise angle from the downward equilibrium, zeta and omega_0 are system parameters, and tau is our control input&mdash;the torque.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"We'll jointly train a neural controller tau = u left( theta fracdthetadt right) and neural Lyapunov function V which will certify the stability of the closed-loop system.","category":"page"},{"location":"demos/policy_search/#Copy-Pastable-Code","page":"Policy Search on the Driven Inverted Pendulum","title":"Copy-Pastable Code","text":"","category":"section"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"using NeuralPDE, Lux, Boltz, ModelingToolkit, NeuralLyapunov\nimport Optimization, OptimizationOptimisers, OptimizationOptimJL\nusing Random\n\nRandom.seed!(200)\n\n######################### Define dynamics and domain ##########################\n\n@parameters ζ ω_0\ndefaults = Dict([ζ => 0.5, ω_0 => 1.0])\n\n@variables t θ(t) τ(t) [input = true]\nDt = Differential(t)\nDDt = Dt^2\n\neqs = [DDt(θ) + 2ζ * ω_0 * Dt(θ) + ω_0^2 * sin(θ) ~ τ]\n\n@named driven_pendulum = ODESystem(\n    eqs,\n    t,\n    [θ, τ],\n    [ζ, ω_0];\n    defaults = defaults\n)\n\nbounds = [\n    θ ∈ (0, 2π),\n    Dt(θ) ∈ (-10.0, 10.0)\n]\n\nupright_equilibrium = [π, 0.0]\n\n####################### Specify neural Lyapunov problem #######################\n\n# Define neural network discretization\n# We use an input layer that is periodic with period 2π with respect to θ\ndim_state = length(bounds)\ndim_hidden = 20\ndim_phi = 3\ndim_u = 1\ndim_output = dim_phi + dim_u\nchain = [Lux.Chain(\n             Boltz.Layers.PeriodicEmbedding([1], [2π]),\n             Dense(3, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1)\n         ) for _ in 1:dim_output]\n\n# Define neural network discretization\nstrategy = QuasiRandomTraining(1_250)\ndiscretization = PhysicsInformedNN(chain, strategy)\n\n# Define neural Lyapunov structure\nstructure = PositiveSemiDefiniteStructure(\n    dim_phi;\n    pos_def = function (state, fixed_point)\n        θ, ω = state\n        θ_eq, ω_eq = fixed_point\n        log(1.0 + (sin(θ) - sin(θ_eq))^2 + (cos(θ) - cos(θ_eq))^2 + (ω - ω_eq)^2)\n    end\n)\nstructure = add_policy_search(\n    structure,\n    dim_u\n)\nminimization_condition = DontCheckNonnegativity(check_fixed_point = false)\n\n# Define Lyapunov decrease condition\ndecrease_condition = AsymptoticStability()\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)\n\n############################# Construct PDESystem #############################\n\n@named pde_system = NeuralLyapunovPDESystem(\n    driven_pendulum,\n    bounds,\n    spec;\n    fixed_point = upright_equilibrium\n)\n\n######################## Construct OptimizationProblem ########################\n\nprob = discretize(pde_system, discretization)\n\n########################## Solve OptimizationProblem ##########################\n\nres = Optimization.solve(prob, OptimizationOptimisers.Adam(); maxiters = 400)\nprob = Optimization.remake(prob, u0 = res.u)\nres = Optimization.solve(prob, OptimizationOptimJL.BFGS(); maxiters = 300)\n\n###################### Get numerical numerical functions ######################\n\nnet = discretization.phi\n_θ = res.u.depvar\n\n(open_loop_pendulum_dynamics, _), state_order, p_order = ModelingToolkit.generate_control_function(\n    driven_pendulum; simplify = true)\np = [defaults[param] for param in p_order]\n\nV_func, V̇_func = get_numerical_lyapunov_function(\n    net,\n    _θ,\n    structure,\n    open_loop_pendulum_dynamics,\n    upright_equilibrium;\n    p = p\n)\n\nu = get_policy(net, _θ, dim_output, dim_u)","category":"page"},{"location":"demos/policy_search/#Detailed-description","page":"Policy Search on the Driven Inverted Pendulum","title":"Detailed description","text":"","category":"section"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"using Random\n\nRandom.seed!(200)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"In this example, we'll set up the dynamics using a ModelingToolkit ODESystem. Since the torque tau is our control input, we use the [input = true] flag for it.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"Since the angle theta is periodic with period 2pi, our box domain will be one period in theta and an interval in fracdthetadt.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"using ModelingToolkit\n\n@parameters ζ ω_0\ndefaults = Dict([ζ => 0.5, ω_0 => 1.0])\n\n@variables t θ(t) τ(t) [input = true]\nDt = Differential(t)\nDDt = Dt^2\n\neqs = [DDt(θ) + 2ζ * ω_0 * Dt(θ) + ω_0^2 * sin(θ) ~ τ]\n\nbounds = [\n    θ ∈ (0, 2π),\n    Dt(θ) ∈ (-10.0, 10.0)\n]\n\nupright_equilibrium = [π, 0.0]\n\n@named driven_pendulum = ODESystem(\n    eqs,\n    t,\n    [θ, τ],\n    [ζ, ω_0];\n    defaults = defaults\n)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"We'll use an architecture that's 2pi-periodic in theta so that we can train on just one period of theta and don't need to add any periodic boundary conditions. To achieve that, we use Boltz.Layers.PeriodicEmbedding([1], [2pi]), enforces 2pi-periodicity in input number 1. Additionally, we include output dimensions for both the neural Lyapunov function and the neural controller.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"Other than that, setting up the neural network using Lux and NeuralPDE training strategy is no different from any other physics-informed neural network problem. For more on that aspect, see the NeuralPDE documentation.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"using Lux\nimport Boltz.Layers: PeriodicEmbedding\n\n# Define neural network discretization\n# We use an input layer that is periodic with period 2π with respect to θ\ndim_state = length(bounds)\ndim_hidden = 20\ndim_phi = 3\ndim_u = 1\ndim_output = dim_phi + dim_u\nchain = [Lux.Chain(\n             PeriodicEmbedding([1], [2π]),\n             Dense(3, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1)\n         ) for _ in 1:dim_output]","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"using NeuralPDE\n\n# Define neural network discretization\nstrategy = QuasiRandomTraining(1250)\ndiscretization = PhysicsInformedNN(chain, strategy)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"We now define our Lyapunov candidate structure along with the form of the Lyapunov conditions we'll be using.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"The default Lyapunov candidate from PositiveSemiDefiniteStructure is:","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"V(x) = left( 1 + lVert phi(x) rVert^2 right) log left( 1 + lVert x rVert^2 right)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"which structurally enforces positive definiteness. We'll modify the second factor to be 2pi-periodic in theta:","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"using NeuralLyapunov\n\n# Define neural Lyapunov structure\nstructure = PositiveSemiDefiniteStructure(\n    dim_phi;\n    pos_def = function (state, fixed_point)\n        θ, ω = state\n        θ_eq, ω_eq = fixed_point\n        log(1.0 + (sin(θ) - sin(θ_eq))^2 + (cos(θ) - cos(θ_eq))^2 + (ω - ω_eq)^2)\n    end\n)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"In addition to representing the neural Lyapunov function, our neural network must also represent the controller. For this, we use the add_policy_search function, which tells NeuralLyapunov to expect dynamics with a control input and to treat the last dim_u dimensions of the neural network as the output of our controller.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"structure = add_policy_search(\n    structure,\n    dim_u\n)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"Since our Lyapunov candidate structurally enforces positive definiteness, we use DontCheckNonnegativity.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"minimization_condition = DontCheckNonnegativity(check_fixed_point = false)\n\n# Define Lyapunov decrease condition\ndecrease_condition = AsymptoticStability()\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)\n\n# Construct PDESystem \n@named pde_system = NeuralLyapunovPDESystem(\n    driven_pendulum,\n    bounds,\n    spec;\n    fixed_point = upright_equilibrium\n)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"Now, we solve the PDESystem using NeuralPDE the same way we would any PINN problem.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"prob = discretize(pde_system, discretization)\n\nimport Optimization, OptimizationOptimisers, OptimizationOptimJL\n\nres = Optimization.solve(prob, OptimizationOptimisers.Adam(); maxiters = 400)\nprob = Optimization.remake(prob, u0 = res.u)\nres = Optimization.solve(prob, OptimizationOptimJL.BFGS(); maxiters = 300)\n\nnet = discretization.phi\n_θ = res.u.depvar","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"We can use the result of the optimization problem to build the Lyapunov candidate as a Julia function, as well as extract our controller, using the get_policy function.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"(open_loop_pendulum_dynamics, _), state_order, p_order = ModelingToolkit.generate_control_function(driven_pendulum; simplify = true)\np = [defaults[param] for param in p_order]\n\nV_func, V̇_func = get_numerical_lyapunov_function(\n    net,\n    _θ,\n    structure,\n    open_loop_pendulum_dynamics,\n    upright_equilibrium;\n    p = p\n)\n\nu = get_policy(net, _θ, dim_output, dim_u)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"Now, let's evaluate our controller. First, we'll get the usual summary statistics on the Lyapunov function and plot V, dotV, and the violations of the decrease condition.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"lb = [0.0, -10.0];\nub = [2π, 10.0];\nxs = (-2π):0.1:(2π)\nys = lb[2]:0.1:ub[2]\nstates = Iterators.map(collect, Iterators.product(xs, ys))\nV_samples = vec(V_func(hcat(states...)))\nV̇_samples = vec(V̇_func(hcat(states...)))\n\n# Print statistics\nprintln(\"V(π, 0) = \", V_func(upright_equilibrium))\nprintln(\n    \"f([π, 0], u([π, 0])) = \",\n    open_loop_pendulum_dynamics(upright_equilibrium, u(upright_equilibrium), p, 0.0)\n)\nprintln(\n    \"V ∋ [\",\n    min(V_func(upright_equilibrium),\n    minimum(V_samples)),\n    \", \",\n    maximum(V_samples),\n    \"]\"\n)\nprintln(\n    \"V̇ ∋ [\",\n    minimum(V̇_samples),\n    \", \",\n    max(V̇_func(upright_equilibrium), maximum(V̇_samples)),\n    \"]\"\n)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"using Plots\n\np1 = plot(\n    xs / pi,\n    ys,\n    V_samples,\n    linetype =\n    :contourf,\n    title = \"V\",\n    xlabel = \"θ/π\",\n    ylabel = \"ω\",\n    c = :bone_1\n);\np1 = scatter!([-2 * pi, 0, 2 * pi] / pi, [0, 0, 0],\n    label = \"Downward Equilibria\", color = :red, markershape = :x);\np1 = scatter!(\n    [-pi, pi] / pi, [0, 0], label = \"Upward Equilibria\", color = :green, markershape = :+);\np2 = plot(\n    xs / pi,\n    ys,\n    V̇_samples,\n    linetype = :contourf,\n    title = \"dV/dt\",\n    xlabel = \"θ/π\",\n    ylabel = \"ω\",\n    c = :binary\n);\np2 = scatter!([-2 * pi, 0, 2 * pi] / pi, [0, 0, 0],\n    label = \"Downward Equilibria\", color = :red, markershape = :x);\np2 = scatter!([-pi, pi] / pi, [0, 0], label = \"Upward Equilibria\", color = :green,\n    markershape = :+, legend = false);\np3 = plot(\n    xs / pi,\n    ys,\n    V̇_samples .< 0,\n    linetype = :contourf,\n    title = \"dV/dt < 0\",\n    xlabel = \"θ/π\",\n    ylabel = \"ω\",\n    colorbar = false,\n    linewidth = 0\n);\np3 = scatter!([-2 * pi, 0, 2 * pi] / pi, [0, 0, 0],\n    label = \"Downward Equilibria\", color = :green, markershape = :+);\np3 = scatter!([-pi, pi] / pi, [0, 0], label = \"Upward Equilibria\",\n    color = :red, markershape = :x, legend = false);\nplot(p1, p2, p3)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"Now, let's simulate the closed-loop dynamics to verify that the controller can get our system to the upward equilibrium.","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"First, we'll start at the downward equilibrium:","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"state_order = map(st -> SymbolicUtils.isterm(st) ? operation(st) : st, state_order)\nstate_syms = Symbol.(state_order)\n\nclosed_loop_dynamics = ODEFunction(\n    (x, p, t) -> open_loop_pendulum_dynamics(x, u(x), p, t);\n    sys = SciMLBase.SymbolCache(state_syms, Symbol.(p_order))\n)\n\nusing DifferentialEquations\n\n# Starting still at bottom ...\ndownward_equilibrium = zeros(2)\node_prob = ODEProblem(closed_loop_dynamics, downward_equilibrium, [0.0, 120.0], p)\nsol = solve(ode_prob, Tsit5())\nplot(sol)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"# ...the system should make it to the top\nθ_end, ω_end = sol.u[end]\nx_end, y_end = sin(θ_end), -cos(θ_end)\n[x_end, y_end, ω_end] # Should be approximately [0.0, 1.0, 0.0]","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"Then, we'll start at a random state:","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"# Starting at a random point ...\nx0 = lb .+ rand(2) .* (ub .- lb)\node_prob = ODEProblem(closed_loop_dynamics, x0, [0.0, 150.0], p)\nsol = solve(ode_prob, Tsit5())\nplot(sol)","category":"page"},{"location":"demos/policy_search/","page":"Policy Search on the Driven Inverted Pendulum","title":"Policy Search on the Driven Inverted Pendulum","text":"# ...the system should make it to the top\nθ_end, ω_end = sol.u[end]\nx_end, y_end = sin(θ_end), -cos(θ_end)\n[x_end, y_end, ω_end] # Should be approximately [0.0, 1.0, 0.0]","category":"page"},{"location":"demos/roa_estimation/#Estimating-the-Region-of-Attraction","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"","category":"section"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"In this demonstration, we add awareness of the region of attraction (RoA) estimation task to our training.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"We'll be examining the simple one-dimensional differential equation:","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"fracdxdt = - x + x^3","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"This system has a fixed point at x = 0 which has a RoA of x in (-1 1), which we will attempt to identify.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"We'll train in the larger domain x in -2 2.","category":"page"},{"location":"demos/roa_estimation/#Copy-Pastable-Code","page":"Estimating the Region of Attraction","title":"Copy-Pastable Code","text":"","category":"section"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"using NeuralPDE, Lux, NeuralLyapunov\nusing Optimization, OptimizationOptimisers, OptimizationOptimJL\nusing Random\n\nRandom.seed!(200)\n\n######################### Define dynamics and domain ##########################\n\nf(x, p, t) = -x .+ x .^ 3\nlb = [-2.0];\nub = [ 2.0];\nfixed_point = [0.0];\n\n####################### Specify neural Lyapunov problem #######################\n\n# Define neural network discretization\ndim_state = length(lb)\ndim_hidden = 5\ndim_output = 2\nchain = [Lux.Chain(\n             Dense(dim_state, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1, use_bias = false)\n         ) for _ in 1:dim_output]\n\n# Define training strategy\nstrategy = GridTraining(0.1)\ndiscretization = PhysicsInformedNN(chain, strategy)\n\n# Define neural Lyapunov structure\nstructure = PositiveSemiDefiniteStructure(dim_output)\nminimization_condition = DontCheckNonnegativity()\n\n# Define Lyapunov decrease condition\ndecrease_condition = make_RoA_aware(AsymptoticStability())\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)\n\n############################# Construct PDESystem #############################\n\n@named pde_system = NeuralLyapunovPDESystem(\n    f,\n    lb,\n    ub,\n    spec\n)\n\n######################## Construct OptimizationProblem ########################\n\nprob = discretize(pde_system, discretization)\n\n########################## Solve OptimizationProblem ##########################\n\nres = Optimization.solve(prob, OptimizationOptimisers.Adam(); maxiters = 300)\nprob = Optimization.remake(prob, u0 = res.u)\nres = Optimization.solve(prob, OptimizationOptimJL.BFGS(); maxiters = 300)\n\n###################### Get numerical numerical functions ######################\nnet = discretization.phi\nθ = res.u.depvar\n\nV, V̇ = get_numerical_lyapunov_function(\n    net,\n    θ,\n    structure,\n    f,\n    fixed_point\n)\n\n################################## Simulate ###################################\nstates = lb[]:0.001:ub[]\nV_samples = vec(V(states'))\nV̇_samples = vec(V̇(states'))\n\n# Calculated RoA estimate\nρ = decrease_condition.ρ\nRoA_states = states[vec(V(transpose(states))) .≤ ρ]\nRoA = (first(RoA_states), last(RoA_states))","category":"page"},{"location":"demos/roa_estimation/#Detailed-description","page":"Estimating the Region of Attraction","title":"Detailed description","text":"","category":"section"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"using Random\n\nRandom.seed!(200)","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"In this example, we set up the dynamics as a Julia function and don't bother specifying the symbols for the variables (so x will be called the default state1 in the PDESystem).","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"f(x, p, t) = -x .+ x .^ 3\nlb = [-2.0];\nub = [ 2.0];\nfixed_point = [0.0];\nnothing # hide","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"Setting up the neural network using Lux and NeuralPDE training strategy is no different from any other physics-informed neural network problem. For more on that aspect, see the NeuralPDE documentation. Since we're only considering one dimension, training on a grid isn't so bad in this case.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"using Lux\n\n# Define neural network discretization\ndim_state = length(lb)\ndim_hidden = 5\ndim_output = 2\nchain = [Lux.Chain(\n             Dense(dim_state, dim_hidden, tanh),\n             Dense(dim_hidden, dim_hidden, tanh),\n             Dense(dim_hidden, 1, use_bias = false)\n         ) for _ in 1:dim_output]","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"using NeuralPDE\n\n# Define training strategy\nstrategy = GridTraining(0.1)\ndiscretization = PhysicsInformedNN(chain, strategy)","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"We now define our Lyapunov candidate structure along with the form of the Lyapunov conditions we'll be using.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"For this example, let's use the default Lyapunov candidate from PositiveSemiDefiniteStructure:","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"V(x) = left( 1 + lVert phi(x) rVert^2 right) log left( 1 + lVert x rVert^2 right)","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"which structurally enforces positive definiteness. We therefore use DontCheckNonnegativity().","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"We only require asymptotic stability in this example, but we use make_RoA_aware to only penalize positive values of dotV(x) when V(x) le 1.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"using NeuralLyapunov\n\n# Define neural Lyapunov structure\nstructure = PositiveSemiDefiniteStructure(dim_output)\nminimization_condition = DontCheckNonnegativity()\n\n# Define Lyapunov decrease condition\ndecrease_condition = make_RoA_aware(AsymptoticStability())\n\n# Construct neural Lyapunov specification\nspec = NeuralLyapunovSpecification(\n    structure,\n    minimization_condition,\n    decrease_condition\n)\n\n# Construct PDESystem \n@named pde_system = NeuralLyapunovPDESystem(\n    f,\n    lb,\n    ub,\n    spec\n)","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"Now, we solve the PDESystem using NeuralPDE the same way we would any PINN problem.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"prob = discretize(pde_system, discretization)\n\nimport Optimization, OptimizationOptimisers, OptimizationOptimJL\n\nres = Optimization.solve(prob, OptimizationOptimisers.Adam(); maxiters = 300)\nprob = Optimization.remake(prob, u0 = res.u)\nres = Optimization.solve(prob, OptimizationOptimJL.BFGS(); maxiters = 300)\n\nnet = discretization.phi\nθ = res.u.depvar","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"We can use the result of the optimization problem to build the Lyapunov candidate as a Julia function, then sample on a finer grid than we trained on to find the estimated region of attraction.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"V, V̇ = get_numerical_lyapunov_function(\n    net,\n    θ,\n    structure,\n    f,\n    fixed_point\n)\n\n# Sample\nstates = lb[]:0.001:ub[]\nV_samples = vec(V(states'))\nV̇_samples = vec(V̇(states'))\n\n# Calculate RoA estimate\nρ = decrease_condition.ρ\nRoA_states = states[vec(V(transpose(states))) .≤ ρ]\nRoA = (first(RoA_states), last(RoA_states))\n\n# Print statistics\nprintln(\"V(0.,0.) = \", V(fixed_point))\nprintln(\"V ∋ [\", min(V(fixed_point), minimum(V_samples)), \", \", maximum(V_samples), \"]\")\nprintln(\n    \"V̇ ∋ [\",\n    minimum(V̇_samples),\n    \", \",\n    max(V̇(fixed_point), maximum(V̇_samples)),\n    \"]\",\n)\nprintln(\"True region of attraction: (-1, 1)\")\nprintln(\"Estimated region of attraction: \", RoA)","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"The estimated region of attraction is within the true region of attraction.","category":"page"},{"location":"demos/roa_estimation/","page":"Estimating the Region of Attraction","title":"Estimating the Region of Attraction","text":"using Plots\n\np_V = plot(states, V_samples, label = \"V\", xlabel = \"x\", linewidth=2);\np_V = hline!([ρ], label = \"V = ρ\", legend = :top);\np_V = vspan!(collect(RoA); label = \"Estimated Region of Attraction\", color = :gray, fillstyle = :/);\np_V = vspan!([-1, 1]; label = \"True Region of Attraction\", opacity = 0.2, color = :green);\n\np_V̇ = plot(states, V̇_samples, label = \"dV/dt\", xlabel = \"x\", linewidth=2);\np_V̇ = hline!([0.0], label = \"dV/dt = 0\", legend = :top);\np_V̇ = vspan!(collect(RoA); label = \"Estimated Region of Attraction\", color = :gray, fillstyle = :/);\np_V̇ = vspan!([-1, 1]; label = \"True Region of Attraction\", opacity = 0.2, color = :green);\n\nplt = plot(p_V, p_V̇)","category":"page"},{"location":"man/decrease/#Lyapunov-Decrease-Condition","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"","category":"section"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"To represent the condition that the Lyapunov function V(x) must decrease along system trajectories, we typically introduce a new function dotV(x) = nabla V(x) cdot f(x). This function represents the rate of change of V along system trajectories. That is to say, if x(t) is a trajectory defined by fracdxdt = f(x), then dotV(x(t)) = fracddt  V(x(t)) . It is then sufficient to show that dotV(x) is negative away from the fixed point and zero at the fixed point, since a negative derivative means a decreasing function.","category":"page"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"Put mathematically, it is sufficient to require dotV(x)  0  forall x ne x_0 and dotV(x_0) = 0. We call such functions negative definite (around the fixed point x_0). The weaker condition that dotV(x) le 0  forall x ne x_0 and dotV(x_0) = 0 is negative semi-definiteness.","category":"page"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"The condition that dotV(x_0) = 0 is satisfied by the definition of dotV and the fact that x_0 is a fixed point, so we do not need to train for it. In cases where the dynamics have some dependence on the neural network (e.g., in policy search), we should rather train directly for f(x_0) = 0, since the minimization condition will also guarantee nabla V(x_0) = 0, so dotV(x_0) = 0.","category":"page"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"NeuralLyapunov.jl provides the LyapunovDecreaseCondition struct for users to specify the form of the decrease condition to enforce through training.","category":"page"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"LyapunovDecreaseCondition","category":"page"},{"location":"man/decrease/#NeuralLyapunov.LyapunovDecreaseCondition","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.LyapunovDecreaseCondition","text":"LyapunovDecreaseCondition(check_decrease, rate_metric, strength, rectifier)\n\nSpecifies the form of the Lyapunov decrease condition to be used.\n\nFields\n\ncheck_decrease::Bool: whether or not to train for negativity/nonpositivity of V(x).\nrate_metric::Function: should increase with V(x); used when check_decrease == true.\nstrength::Function: specifies the level of strictness for negativity training; should be zero when the two inputs are equal and nonnegative otherwise; used when check_decrease == true.\nrectifier::Function: positive when the input is positive and (approximately) zero when the input is negative.\n\nTraining conditions\n\nIf check_decrease == true, training will enforce:\n\ntextttrate_metric(V(x) V(x))  -textttstrength(x x_0)\n\nThe inequality will be approximated by the equation:\n\ntextttrectifier(textttrate_metric(V(x) V(x)) + textttstrength(x x_0)) = 0\n\nNote that the approximate equation and inequality are identical when textttrectifier(t) = max(0 t).\n\nIf the dynamics truly have a fixed point at x_0 and V(x) is truly the rate of decrease of V(x) along the dynamics, then V(x_0) will be 0 and there is no need to train for V(x_0) = 0.\n\nExamples:\n\nAsymptotic decrease can be enforced by requiring     V(x)  -C lVert x - x_0 rVert^2, for some positive C, which corresponds to\n\nrate_metric = (V, dVdt) -> dVdt\nstrength = (x, x0) -> C * (x - x0) ⋅ (x - x0)\n\nThis can also be accomplished with AsymptoticStability.\n\nExponential decrease of rate k is proven by     V(x)  - k V(x), which corresponds to\n\nrate_metric = (V, dVdt) -> dVdt + k * V\nstrength = (x, x0) -> 0.0\n\nThis can also be accomplished with ExponentialStability.\n\nIn either case, the rectified linear unit rectifier = (t) -> max(zero(t), t) exactly represents the inequality, but differentiable approximations of this function may be employed.\n\n\n\n\n\n","category":"type"},{"location":"man/decrease/#Pre-defined-decrease-conditions","page":"Lyapunov Decrease Condition","title":"Pre-defined decrease conditions","text":"","category":"section"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"AsymptoticStability\nExponentialStability\nStabilityISL\nDontCheckDecrease","category":"page"},{"location":"man/decrease/#NeuralLyapunov.AsymptoticStability","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.AsymptoticStability","text":"AsymptoticStability(; C, rectifier)\n\nConstruct a LyapunovDecreaseCondition corresponding to asymptotic stability.\n\nThe decrease condition for asymptotic stability is V(x)  0, which is here represented as V(x)  - C lVert x - x_0 rVert^2 for some C  0. C defaults to 1e-6.\n\nThe inequality is represented by textttrectifier(V(x) + C lVert x - x_0 rVert^2) = 0. The default value rectifier = (t) -> max(zero(t), t) exactly represents the inequality, but differentiable approximations of this function may be employed.\n\n\n\n\n\n","category":"function"},{"location":"man/decrease/#NeuralLyapunov.ExponentialStability","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.ExponentialStability","text":"ExponentialStability(k; rectifier)\n\nConstruct a LyapunovDecreaseCondition corresponding to exponential stability of rate k.\n\nThe Lyapunov condition for exponential stability is V(x)  -k V(x) for some k  0.\n\nThe inequality is represented by textttrectifier(V(x) + k V(x)) = 0. The default value rectifier = (t) -> max(zero(t), t) exactly represents the inequality, but differentiable approximations of this function may be employed.\n\n\n\n\n\n","category":"function"},{"location":"man/decrease/#NeuralLyapunov.StabilityISL","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.StabilityISL","text":"StabilityISL(; rectifier)\n\nConstruct a LyapunovDecreaseCondition corresponding to stability in the sense of Lyapunov (i.s.L.).\n\nStability i.s.L. is proven by V(x)  0. The inequality is represented by textttrectifier(V(x)) = 0. The default value rectifier = (t) -> max(zero(t), t) exactly represents the inequality, but differentiable approximations of this function may be employed.\n\n\n\n\n\n","category":"function"},{"location":"man/decrease/#NeuralLyapunov.DontCheckDecrease","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.DontCheckDecrease","text":"DontCheckDecrease()\n\nConstruct a LyapunovDecreaseCondition which represents not checking for decrease of the Lyapunov function along system trajectories. This is appropriate in cases when the Lyapunov decrease condition has been structurally enforced.\n\n\n\n\n\n","category":"function"},{"location":"man/decrease/#Defining-your-own-decrease-condition","page":"Lyapunov Decrease Condition","title":"Defining your own decrease condition","text":"","category":"section"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"CurrentModule = NeuralLyapunov","category":"page"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"If a user wishes to define their own version of the decrease condition in a form other than textttrate_metric(V(x) dotV(x)) le - textttstrength(x x_0), they must define their own subtype of AbstractLyapunovDecreaseCondition.","category":"page"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"AbstractLyapunovDecreaseCondition","category":"page"},{"location":"man/decrease/#NeuralLyapunov.AbstractLyapunovDecreaseCondition","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.AbstractLyapunovDecreaseCondition","text":"AbstractLyapunovDecreaseCondition\n\nRepresents the decrease condition in a neural Lyapunov problem\n\nAll concrete AbstractLyapunovDecreaseCondition subtypes should define the check_decrease and get_decrease_condition functions.\n\n\n\n\n\n","category":"type"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"When constructing the PDESystem, NeuralLyapunovPDESystem uses check_decrease to determine if it should include an equation equating the result of get_decrease_condition to zero.","category":"page"},{"location":"man/decrease/","page":"Lyapunov Decrease Condition","title":"Lyapunov Decrease Condition","text":"check_decrease\nget_decrease_condition","category":"page"},{"location":"man/decrease/#NeuralLyapunov.check_decrease","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.check_decrease","text":"check_decrease(cond::AbstractLyapunovDecreaseCondition)\n\nReturn true if cond specifies training to meet the Lyapunov decrease condition, and false if cond specifies no training to meet this condition.\n\n\n\n\n\n","category":"function"},{"location":"man/decrease/#NeuralLyapunov.get_decrease_condition","page":"Lyapunov Decrease Condition","title":"NeuralLyapunov.get_decrease_condition","text":"get_decrease_condition(cond::AbstractLyapunovDecreaseCondition)\n\nReturn a function of V, V, x, and x_0 that returns zero when the Lyapunov decrease condition is met and a value greater than zero when it is violated.\n\nNote that the first two inputs, V and V, are functions, so the decrease condition can depend on the value of these functions at multiple points.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NeuralLyapunov","category":"page"},{"location":"#NeuralLyapunov.jl","page":"Home","title":"NeuralLyapunov.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NeuralLyapunov.jl is a library for searching for neural Lyapunov functions in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides an API for setting up the search for a neural Lyapunov function. Such a search can be formulated as a partial differential inequality, and this library generates a ModelingToolkit.jl PDESystem to be solved using NeuralPDE.jl. Since the Lyapunov conditions can be formulated in several different ways and a neural Lyapunov function can be set up in many different forms, this library presents an extensible interface for users to choose how they wish to set up the search, with useful pre-built options for common setups.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If this is your first time using the library, start by familiarizing yourself with the components of a neural Lyapunov problem in NeuralLyapunov.jl. Then, you can dive in with any of the following demonstrations (the damped simple harmonic oscillator is recommended to begin):","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = Main.DEMONSTRATION_PAGES\nDepth = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you begin to write your own neural Lyapunov code, especially if you hope to define your own neural Lyapunov formulation, you may find any of the following manual pages useful:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = Main.MANUAL_PAGES","category":"page"}]
}
