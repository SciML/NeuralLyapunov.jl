name: CI
on:
  push:
    branches:
      - master
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 1440
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.11'
        os:
          - ubuntu-latest
        arch:
          - x64
        allow_failure: 
          - false
        include:
          - version: 'nightly'
            os: ubuntu-latest
            arch: x64
            allow_failure: true
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - name: "Dev NeuralLyapunovProblemLibrary"
        run: |
          import Pkg
          Pkg.Registry.update()
          Pkg.develop(Pkg.PackageSpec(path="lib/NeuralLyapunovProblemLibrary"))
          Pkg.instantiate()
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=test {0}
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
        with:
            directories: src,ext,lib/NeuralLyapunovProblemLibrary/src,lib/NeuralLyapunovProblemLibrary/ext
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          dev_pkgs = Pkg.PackageSpec[]
          for pkg in (pwd(), pwd() * "/lib/NeuralLyapunovProblemLibrary")
            push!(dev_pkgs, Pkg.PackageSpec(path=pkg))
          end
          Pkg.develop(dev_pkgs)
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using NeuralLyapunov
          DocMeta.setdocmeta!(NeuralLyapunov, :DocTestSetup, :(using NeuralLyapunov); recursive=true)
          doctest(NeuralLyapunov)
